name: Build & Test App
on:
  push:
    branches:
      - 'dev/v[0-9]+.[0-9]+'

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "🎉 The job was automatically triggered by a ${{ gitea.event_name }} event."
  #     - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by Gitea!"
  #     - run: echo "🔎 The name of your branch is ${{ gitea.ref }} and your repository is ${{ gitea.repository }}."
  #     - name: Check out repository code
  #       uses: actions/checkout@v4
  #     - run: echo "💡 The ${{ gitea.repository }} repository has been cloned to the runner."
  #     - run: echo "🖥️ The workflow is now ready to test your code on the runner."
  #     - name: List files in the repository
  #       run: |
  #         ls ${{ gitea.workspace }}
  #     - run: echo "🍏 This job's status is ${{ job.status }}."
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Output Run ID
        run: echo ${{ github.run_id }}
      - name: Output Run Number
        run: echo ${{ github.run_number }}
      - name: Output Run Attempt
        run: echo ${{ github.run_attempt }}

      - name: Login to Local ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.LOCAL_ACR_URL }}
          username: ${{ vars.LOCAL_ACR_USERNAME }}
          password: ${{ secrets.LOCAL_ACR_PASSWORD }}
          
      - name: Get Meta
        id: meta
        run: |
          echo REPO_NAME=$(echo ${GITHUB_REPOSITORY} | awk -F"/" '{print $2}') >> $GITHUB_OUTPUT
          echo REPO_VERSION=$(echo ${GITHUB_REF} | awk -F"/" '{print $4}') >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to Local ACR
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          push: true
          tags: |
            ${{ vars.LOCAL_ACR_URL }}/${{ steps.meta.outputs.REPO_NAME }}:${{ steps.meta.outputs.REPO_VERSION }}-beta

  # test:
  #   runs-on: ubuntu-latest

  notify_success:
    runs-on: ubuntu-latest
    if: job.status == 'success'
    steps:
      - name: Notify Developer
        uses: distributhor/workflow-webhook@v3.0.8
        with:
          verbose: true
          webhook_url: ${{ vars.PUSHOVER_URL }}
          data: '{ "user": "${{ secrets.PUSHOVER_USER }}", "token": "${{ secrets.PUSHOVER_TOKEN }}", "message": "[SUCCESS] Built & tested ${{ steps.meta.outputs.REPO_NAME }}:${{ steps.meta.outputs.REPO_VERSION }}-beta app!" }'

  notify_failure:
    runs-on: ubuntu-latest
    if: job.status != 'success'
    steps:
      - name: Notify Developer
        uses: distributhor/workflow-webhook@v3.0.8
        with:
          webhook_url: ${{ vars.PUSHOVER_URL }}
          data: '{ "user": "${{ secrets.PUSHOVER_USER }}", "token": "${{ secrets.PUSHOVER_TOKEN }}", "message": "[FAILURE] Unable to built & tested ${{ steps.meta.outputs.REPO_NAME }}:${{ steps.meta.outputs.REPO_VERSION }}-beta app." }'



# Dev run
# Build images and push to local ACR
# Run automated tests on it
#   - Perform API calls (grab list of alerts & jobs)
#   - Perform API call on alert tests
#   - Perform API call on job tests
# Notify user of successful/failed build&push&test


